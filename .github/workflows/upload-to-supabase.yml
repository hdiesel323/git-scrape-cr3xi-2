name: Upload JSON to Supabase Table and Create Vectors

on:
  workflow_dispatch:
  schedule:
    - cron: '0 12 * * *'  # Run daily at 12:00 PM UTC (after uploading to storage)
  push:
    branches:
      - main

jobs:
  upload-to-supabase-table:
    runs-on: ubuntu-latest

    steps:
    - name: Check out this repo
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install Required Python Packages
      run: |
        pip install supabase openai numpy

    - name: Upload JSON to Supabase Table and Generate Vectors
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        python - <<EOF
        import os
        import json
        import openai
        import numpy as np
        from supabase import create_client

        # Initialize Supabase client
        SUPABASE_URL = os.getenv('SUPABASE_URL')
        SUPABASE_KEY = os.getenv('SUPABASE_KEY')
        supabase = create_client(SUPABASE_URL, SUPABASE_KEY)

        # Initialize OpenAI client
        openai.api_key = os.getenv('OPENAI_API_KEY')

        # Function to generate vector embeddings using OpenAI
        def generate_embedding(text):
            response = openai.Embedding.create(input=text, model="text-embedding-ada-002")
            return response['data'][0]['embedding']

        # Load the JSON data
        try:
            with open("crexi-industrial-owner-carry.json", "r") as file:
                properties = json.load(file)

            # Iterate over properties and insert into the table
            for property_data in properties:
                # Adjust keys to match the table columns
                property_data['thumbnail_url'] = property_data.pop('thumbnailUrl', None)
                property_data['url_slug'] = property_data.pop('urlSlug', None)
                property_data['broker_team_logo_url'] = property_data.pop('brokerTeamLogoUrl', None)
                property_data['activated_on'] = property_data.pop('activatedOn', None)
                property_data['updated_on'] = property_data.pop('updatedOn', None)
                property_data['full_address'] = property_data['locations'][0]['fullAddress'] if property_data.get('locations') else None
                property_data['latitude'] = property_data['locations'][0]['latitude'] if property_data.get('locations') else None
                property_data['longitude'] = property_data['locations'][0]['longitude'] if property_data.get('locations') else None
                del property_data['locations']

                # Generate vector embedding for the property description
                embedding = generate_embedding(property_data['description']) if property_data.get('description') else [0.0] * 768
                property_data['embedding'] = embedding

                response = supabase.table('crexi_properties').insert(property_data).execute()
                if response.get('status_code') != 201:
                    print(f"Failed to insert property with id {property_data['id']}. Error: {response['error']}")
                    exit(1)

            print("Successfully inserted all properties into Supabase table with vector embeddings.")
        except Exception as e:
            print(f"An error occurred while inserting data into the table: {str(e)}")
            exit(1)
        EOF
