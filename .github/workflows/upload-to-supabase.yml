name: Upload JSON to Supabase Table and Create Vectors

on:
  workflow_dispatch:
  schedule:
    - cron: '0 12 * * *'  # Run daily at 12:00 PM UTC (after uploading to storage)
  push:
    branches:
      - main

jobs:
  upload-to-supabase-table:
    runs-on: ubuntu-latest

    steps:
    - name: Check out this repo
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install Required Python Packages
      run: |
        pip install supabase openai numpy

    - name: Upload JSON to Supabase Table and Generate Vectors
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        python - <<EOF
        import os
        import json
        import openai
        import numpy as np
        from supabase import create_client, Client

        # Initialize Supabase client
        SUPABASE_URL = os.getenv('SUPABASE_URL')
        SUPABASE_KEY = os.getenv('SUPABASE_KEY')
        supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

        # Initialize OpenAI client
        openai_api_key = os.getenv('OPENAI_API_KEY')
        if not openai_api_key:
            raise ValueError("Missing OpenAI API key. Please set the OPENAI_API_KEY environment variable.")
        openai.api_key = openai_api_key

        # Function to generate vector embeddings using OpenAI
        def generate_embedding(text):
            response = openai.Embedding.create(input=text, model="text-embedding-ada-002")
            return response['data'][0]['embedding']

        # Load the JSON data
        try:
            with open("crexi-industrial-owner-carry.json", "r") as file:
                properties = json.load(file)

            # Iterate over properties and insert into the table
            for property_data in properties:
                # Adjust keys to match the table columns
                property_data['thumbnail_url'] = property_data.pop('thumbnailUrl', None)
                property_data['url_slug'] = property_data.pop('urlSlug', None)
                property_data['broker_team_logo_url'] = property_data.pop('brokerTeamLogoUrl', None)
                property_data['activated_on'] = property_data.pop('activatedOn', None)
                property_data['updated_on'] = property_data.pop('updatedOn', None)
                property_data['full_address'] = property_data['locations'][0]['fullAddress'] if property_data.get('locations') else None
                property_data['latitude'] = property_data['locations'][0]['latitude'] if property_data.get('locations') else None
                property_data['longitude'] = property_data['locations'][0]['longitude'] if property_data.get('locations') else None
                property_data['status'] = property_data.get('status', 'Unknown')
                property_data['property_url'] = property_data.get('propertyUrl', None)
                property_data['is_in_opportunity_zone'] = property_data.get('isInOpportunityZone', False)
                property_data['has_video'] = property_data.get('hasVideo', False)
                property_data['number_of_gallery_items'] = property_data.get('numberOfGalleryItems', 0)
                property_data['number_of_images'] = property_data.get('numberOfImages', 0)
                property_data['types'] = property_data.get('types', [])
                property_data['investment_type'] = property_data.get('investmentType', None)
                property_data['has_om'] = property_data.get('hasOM', False)
                property_data['has_flyer'] = property_data.get('hasFlyer', False)
                property_data['has_virtual_tour'] = property_data.get('hasVirtualTour', False)
                property_data['is_new'] = property_data.get('isNew', False)
                property_data['id'] = property_data.get('id')
                del property_data['locations']

                # Generate vector embedding for the property description
                embedding = generate_embedding(property_data['description']) if property_data.get('description') else [0.0] * 1536
                property_data['embedding'] = embedding

                # Add the entire JSON data as a document
                property_data['json_data'] = json.dumps(property_data)

                # Insert data into Supabase
                response = supabase.table('crexi_properties').insert({
                    'id': property_data['id'],
                    'name': property_data.get('name'),
                    'description': property_data.get('description'),
                    'thumbnail_url': property_data.get('thumbnail_url'),
                    'url_slug': property_data.get('url_slug'),
                    'broker_team_logo_url': property_data.get('broker_team_logo_url'),
                    'brokerage_name': property_data.get('brokerage_name'),
                    'activated_on': property_data.get('activated_on'),
                    'updated_on': property_data.get('updated_on'),
                    'asking_price': property_data.get('asking_price'),
                    'latitude': property_data.get('latitude'),
                    'longitude': property_data.get('longitude'),
                    'full_address': property_data.get('full_address'),
                    'status': property_data.get('status'),
                    'property_url': property_data.get('property_url'),
                    'is_in_opportunity_zone': property_data.get('is_in_opportunity_zone'),
                    'has_video': property_data.get('has_video'),
                    'number_of_gallery_items': property_data.get('number_of_gallery_items'),
                    'number_of_images': property_data.get('number_of_images'),
                    'types': property_data.get('types'),
                    'investment_type': property_data.get('investment_type'),
                    'has_om': property_data.get('has_om'),
                    'has_flyer': property_data.get('has_flyer'),
                    'has_virtual_tour': property_data.get('has_virtual_tour'),
                    'is_new': property_data.get('is_new'),
                    'embedding': embedding,
                    'json_data': property_data  # Directly assign, no need to serialize
                }).execute()

                if not response.get('status_code') or response['status_code'] != 201:
                    print(f"Failed to insert property with id {property_data['id']}. Error: {response}")
                else:
                    print(f"Successfully inserted property with id {property_data['id']}")

            print("Successfully inserted all properties into Supabase table with vector embeddings.")
        except Exception as e:
            print(f"An error occurred while inserting data into the table: {str(e)}")
            exit(1)
        EOF
