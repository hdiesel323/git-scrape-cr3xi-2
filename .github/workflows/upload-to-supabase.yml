name: Upload JSON to Supabase Table and Create Vectors

on:
  workflow_dispatch:
  schedule:
    - cron: '0 12 * * *'  # Run daily at 12:00 PM UTC (after uploading to storage)
  push:
    branches:
      - main

jobs:
  upload-to-supabase-table:
    runs-on: ubuntu-latest

    steps:
    - name: Check out this repo
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install Required Python Packages
      run: |
        pip install supabase openai numpy

    - name: Upload JSON to Supabase Table and Generate Vectors
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        python - <<EOF
        import os
        import json
        import openai
        import numpy as np
        from supabase import create_client, Client

        # Initialize Supabase client
        SUPABASE_URL = os.getenv('SUPABASE_URL')
        SUPABASE_KEY = os.getenv('SUPABASE_KEY')
        supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

        # Initialize OpenAI client
        openai.api_key = os.getenv('OPENAI_API_KEY')

        # Function to generate vector embeddings using OpenAI
        def generate_embedding(text):
            response = openai.Embedding.create(input=text, model="text-embedding-ada-002")
            return response['data'][0]['embedding']

        # Load the JSON data
        try:
            with open("crexi-industrial-owner-carry.json", "r") as file:
                properties = json.load(file)

            # Iterate over properties and insert into the table
            for property_data in properties:
                # Prepare modified property dictionary
                modified_property_data = {
                    'id': property_data.get('id'),
                    'name': property_data.get('name'),
                    'description': property_data.get('description'),
                    'thumbnail_url': property_data.pop('thumbnailUrl', None),
                    'url_slug': property_data.pop('urlSlug', None),
                    'broker_team_logo_url': property_data.pop('brokerTeamLogoUrl', None),
                    'brokerage_name': property_data.get('brokerage_name'),
                    'activated_on': property_data.pop('activatedOn', None),
                    'updated_on': property_data.pop('updatedOn', None),
                    'asking_price': property_data.get('asking_price'),
                    'latitude': property_data['locations'][0]['latitude'] if property_data.get('locations') else None,
                    'longitude': property_data['locations'][0]['longitude'] if property_data.get('locations') else None,
                    'full_address': property_data['locations'][0]['fullAddress'] if property_data.get('locations') else None,
                    'status': property_data.get('status', 'Unknown'),
                    'property_url': property_data.get('propertyUrl', None),
                    'is_in_opportunity_zone': property_data.get('isInOpportunityZone', False),
                    'has_video': property_data.get('hasVideo', False),
                    'number_of_gallery_items': property_data.get('numberOfGalleryItems', 0),
                    'number_of_images': property_data.get('numberOfImages', 0),
                    'types': property_data.get('types', []),
                    'investment_type': property_data.get('investmentType', None),
                    'has_om': property_data.get('hasOM', False),
                    'has_flyer': property_data.get('hasFlyer', False),
                    'has_virtual_tour': property_data.get('hasVirtualTour', False),
                    'is_new': property_data.get('isNew', False)
                }

                # Generate vector embedding for the property description
                embedding = generate_embedding(modified_property_data['description']) if modified_property_data.get('description') else [0.0] * 1536
                modified_property_data['embedding'] = embedding

                # Add the entire JSON data as a document (serialize separately to avoid conflicting keys)
                modified_property_data['json_data'] = json.dumps(property_data)

                # Insert data into Supabase
                response = supabase.table('crexi_properties').insert(modified_property_data).execute()

                # Log the result
                if response.status_code != 201:
                    print(f"Failed to insert property with id {modified_property_data['id']}. Error: {response.json().get('error')}")
                else:
                    print(f"Successfully inserted property with id {modified_property_data['id']}")

            print("Successfully inserted all properties into Supabase table with vector embeddings.")
        except Exception as e:
            print(f"An error occurred while inserting data into the table: {str(e)}")
            exit(1)
        EOF
