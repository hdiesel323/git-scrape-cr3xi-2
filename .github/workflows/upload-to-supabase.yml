name: Upload JSON to Supabase Table and Create Vectors

on:
  workflow_dispatch:
  schedule:
    - cron: '0 12 * * *'  # Run daily at 12:00 PM UTC
  push:
    branches:
      - main

jobs:
  upload-to-supabase-table:
    runs-on: ubuntu-latest

    steps:
    - name: Check out this repo
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install Required Python Packages
      run: |
        pip install supabase openai numpy

    - name: Upload JSON to Supabase Table and Generate Vectors
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        python - <<EOF
        import os
        import json
        import openai
        import numpy as np
        from supabase import create_client, Client

        # Initialize Supabase client
        SUPABASE_URL = os.getenv('SUPABASE_URL')
        SUPABASE_KEY = os.getenv('SUPABASE_KEY')
        supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

        # Initialize OpenAI client
        openai_api_key = os.getenv('OPENAI_API_KEY')
        if not openai_api_key:
            raise ValueError("Missing OpenAI API key. Please set the OPENAI_API_KEY environment variable.")
        openai.api_key = openai_api_key

        # Function to generate vector embeddings using OpenAI
        def generate_embedding(text):
            response = openai.Embedding.create(input=text, model="text-embedding-ada-002")
            return response['data'][0]['embedding']

        # Load the JSON data dynamically
        try:
            with open("crexi-industrial-owner-carry.json", "r") as file:
                properties = json.load(file)

            # Define the default fields to expect
            expected_fields = [
                'id', 'name', 'description', 'thumbnailUrl', 'urlSlug',
                'brokerTeamLogoUrl', 'brokerageName', 'activatedOn', 'updatedOn',
                'askingPrice', 'latitude', 'longitude', 'fullAddress', 'status',
                'propertyUrl', 'isInOpportunityZone', 'hasVideo', 'numberOfGalleryItems',
                'numberOfImages', 'types', 'investmentType', 'hasOM', 'hasFlyer', 'hasVirtualTour', 'isNew'
            ]

            # Iterate over properties and insert into the table dynamically
            for property_data in properties:
                property_id = property_data.get('id')
                if not property_id:
                    print(f"Skipping property with missing or null id: {property_data}")
                    continue

                # Create a dictionary of valid fields only
                valid_data = {key: property_data.get(key, None) for key in expected_fields if key in property_data}

                # Dynamically generate the embedding
                valid_data['embedding'] = generate_embedding(property_data.get('description', ""))

                # Insert data into Supabase
                response = supabase.table('crexi_properties').insert(valid_data).execute()

                if response.data is None:
                    print(f"Failed to insert property with id {property_id}. Error: {response}")
                else:
                    print(f"Successfully inserted property with id {property_id}")

            print("Successfully inserted all properties into Supabase table with vector embeddings.")
        except Exception as e:
            print(f"An error occurred while inserting data into the table: {str(e)}")
            exit(1)
        EOF
